<!DOCTYPE html>
<html>
<head>
    <title>大五班时钟系统</title>
    <style>
        body {
            margin: 0;
            padding: 20px;
            background: #000;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            font-family: Arial, sans-serif;
            color: #fff;
            cursor: default;
            user-select: none;
        }

        #main-container {
            flex: 1;
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0 5%;
            transition: opacity 0.3s;
        }

        #digital-container {
            flex: 1;
            text-align: center;
            padding-right: 5%;
        }

        #digital-clock {
            font-size: 10em;
            letter-spacing: 3px;
            font-weight: bold;
            margin: 0;
            color: rgb(245, 245, 245);
            transition: font-size 0.3s;
        }

        #analog-container {
            flex: 1;
            display: flex;
            justify-content: center;
            align-items: center;
            transition: transform 0.3s;
        }

        #analog-clock {
            width: min(75vh, 75vw);
            height: min(75vh, 75vw);
            background: rgba(255,255,255,0.05);
            backdrop-filter: blur(15px);
            border-radius: 50%;
            border: 2px solid rgba(255,255,255,0.15);
            box-shadow: 
                0 0 40px rgba(255,255,255,0.1),
                inset 0 0 30px rgba(255,255,255,0.08);
        }

        .settings {
            position: fixed;
            left: 20px;
            bottom: 20px;
            z-index: 100;
        }

        .settings-gear {
            width: 40px;
            height: 40px;
            cursor: pointer;
            opacity: 0.7;
            transition: 0.3s;
        }

        .settings-gear:hover {
            opacity: 1;
            transform: rotate(90deg);
        }

        .settings-panel {
            position: absolute;
            left: 50px;
            bottom: 0;
            background: rgba(255,255,255,0.1);
            backdrop-filter: blur(10px);
            padding: 15px;
            border-radius: 8px;
            width: 200px;
            opacity: 0;
            pointer-events: none;
            transition: 0.3s;
        }

        .settings:hover .settings-panel {
            opacity: 1;
            pointer-events: all;
        }

        .settings-item {
            margin: 10px 0;
        }

        .settings-item label {
            display: block;
            margin-bottom: 5px;
            font-size: 0.9em;
            color: #ddd;
        }

        input[type="range"] {
            width: 100%;
            height: 4px;
            background: rgba(255,255,255,0.2);
            border-radius: 2px;
        }

        input[type="range"]::-webkit-slider-thumb {
            -webkit-appearance: none;
            width: 14px;
            height: 14px;
            background: #fff;
            border-radius: 50%;
        }
    </style>
</head>
<body>
    <div id="main-container">
        <div id="digital-container">
            <div id="digital-clock"></div>
        </div>
        <div id="analog-container">
            <canvas id="analog-clock"></canvas>
        </div>
    </div>

    <div class="settings">
        <svg class="settings-gear" viewBox="0 0 24 24">
            <path fill="currentColor" d="M12,15.5A3.5,3.5 0 0,1 8.5,12A3.5,3.5 0 0,1 12,8.5A3.5,3.5 0 0,1 15.5,12A3.5,3.5 0 0,1 12,15.5M..."/>
        </svg>
        <div class="settings-panel">
            <div class="settings-item">
                <label>页面亮度</label>
                <input type="range" id="brightness" min="0.3" max="1" value="1" step="0.1">
            </div>
            <div class="settings-item">
                <label>数字大小</label>
                <input type="range" id="fontSize" min="6" max="14" value="10" step="0.5">
            </div>
            <div class="settings-item">
                <label>时钟大小</label>
                <input type="range" id="clockSize" min="50" max="90" value="75" step="5">
            </div>
        </div>
    </div>

    <script>
        const digitalClock = document.getElementById('digital-clock');
        function updateDigitalClock() {
            const now = new Date();
            let hours = now.getHours() % 12 || 12;
            const minutes = now.getMinutes().toString().padStart(2, '0');
            digitalClock.textContent = `${hours}:${minutes}`;
        }

        const canvas = document.getElementById('analog-clock');
        const ctx = canvas.getContext('2d');
        let clockSizeRatio = 0.75;

        function resizeCanvas() {
            const size = Math.min(window.innerHeight, window.innerWidth) * clockSizeRatio;
            canvas.width = size;
            canvas.height = size;
            drawClock();
        }

        function drawClock() {
            const radius = canvas.width / 2;
            ctx.resetTransform();
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.translate(radius, radius);

            ctx.beginPath();
            ctx.arc(0, 0, radius, 0, Math.PI * 2);
            ctx.fillStyle = 'rgba(255,255,255,0.05)';
            ctx.fill();

            ctx.strokeStyle = 'rgba(255,255,255,0.8)';
            ctx.lineWidth = 2;
            for(let i = 0; i < 60; i++) {
                const angle = (i * Math.PI)/30;
                const length = i % 5 === 0 ? 20 : 8;
                ctx.beginPath();
                ctx.moveTo(Math.cos(angle) * (radius - length), -Math.sin(angle) * (radius - length));
                ctx.lineTo(Math.cos(angle) * (radius - 5), -Math.sin(angle) * (radius - 5));
                ctx.stroke();
            }

            ctx.font = `${radius*0.15}px Arial`;
            ctx.fillStyle = '#fff';
            ctx.textAlign = 'center';
            ctx.textBaseline = 'middle';
            for(let i = 1; i <= 12; i++) {
                const angle = (i * Math.PI)/6;
                const x = Math.cos(angle - Math.PI / 2) * radius * 0.75;
                const y = Math.sin(angle - Math.PI / 2) * radius * 0.75;
                ctx.fillText(i.toString(), x, y);
            }

            const now = new Date();
            const hours = now.getHours() % 12;
            const minutes = now.getMinutes();
            const seconds = now.getSeconds();
            const milliseconds = now.getMilliseconds();

            drawHand((hours * Math.PI/6) + (minutes * Math.PI/(6*60)), radius*0.5, 8, '#fff');
            drawHand((minutes * Math.PI/30) + (seconds * Math.PI/(30*60)), radius*0.7, 5, '#fff');
            drawHand((seconds + milliseconds/1000) * Math.PI/30, radius*0.85, 2, '#fb923c');

            ctx.beginPath();
            ctx.arc(0, 0, radius*0.04, 0, Math.PI*2);
            ctx.fillStyle = '#fff';
            ctx.fill();
        }

        function drawHand(angle, length, width, color) {
            ctx.save();
            ctx.strokeStyle = color;
            ctx.lineWidth = width;
            ctx.lineCap = 'round';
            ctx.beginPath();
            ctx.moveTo(0,0);
            ctx.rotate(angle);
            ctx.lineTo(0, -length);
            ctx.stroke();
            ctx.restore();
        }

        document.getElementById('brightness').addEventListener('input', (e) => {
            document.getElementById('main-container').style.opacity = e.target.value;
        });

        document.getElementById('fontSize').addEventListener('input', (e) => {
            digitalClock.style.fontSize = `${e.target.value}em`;
        });

        document.getElementById('clockSize').addEventListener('input', (e) => {
            clockSizeRatio = e.target.value / 100;
            resizeCanvas();
        });

        window.addEventListener('resize', resizeCanvas);
        resizeCanvas();

        document.addEventListener('keydown', (e) => {
            if (e.key === 'F11') {
                if (!document.fullscreenElement) {
                    document.documentElement.requestFullscreen();
                } else {
                    document.exitFullscreen();
                }
            }
        });

        function animate() {
            updateDigitalClock();
            drawClock();
            requestAnimationFrame(animate);
        }
        animate();
    </script>
</body>
</html>
